type Query {
  users(limit: Int, skip: Int): [User!]!
  clubs(name: String, location: String, limit: Int, skip: Int): [Club!]!
  gear(limit: Int, skip: Int): [Gear!]!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
  createClub(data: CreateClubInput!): Club!
  updateClub(id: ID!, data: UpdateClubInput): Club!
  addClubManager(clubId: ID!, userId: ID!): Club!
  removeClubManager(clubId: ID!, managerId: ID!): Club!
  deleteClub(id: ID!): Club!
  createGear(data: CreateUpdateGearInput!): Gear!
  updateGear(id: ID!, data: CreateUpdateGearInput!): Gear!
  deleteGear(id: ID!): Gear!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String
  friends: [User]
  friend_requests: FriendRequests
}

type AuthPayload {
  user: User!
  token: String!
}

type FriendRequests {
  inbox: [User]
  sent: [User]
}

type Club {
  id: ID!
  name: String!
  location: String!
  managers: [User!]!
  website: String
}

type Gear {
  id: ID!
  name: String
  brand: String
  model: String
  type: String
}

input CreateUserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  username: String
  email: String
  password: String
}

input CreateClubInput {
  name: String!
  location: String!
  website: String
}

input UpdateClubInput {
  name: String
  location: String
  website: String
}

input CreateUpdateGearInput {
  name: String
  brand: String
  model: String
  type: String
}
