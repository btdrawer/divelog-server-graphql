type Query {
  users(where: UserWhereInput, limit: Int, skip: Int): [User!]!
  dives(userId: ID!, where: DiveWhereInput, limit: Int, skip: Int): [Dive!]!
  myDives(where: UpdateDiveInput, limit: Int, skip: Int): [Dive!]!
  clubs(where: ClubWhereInput, limit: Int, skip: Int): [Club!]!
  gear(where: GearInput, limit: Int, skip: Int): [Gear!]!
  myGroups(limit: Int, skip: Int): [Group!]!
  me: User!
}

type Mutation {
  # User
  createUser(data: CreateUserInput!): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  sendOrAcceptFriendRequest(id: ID!): User!
  unfriend(id: ID!): User!
  deleteUser: User!
  # Dive
  createDive(data: CreateDiveInput!): Dive!
  updateDive(id: ID!, data: UpdateDiveInput!): Dive!
  addGearToDive(diveId: ID!, gearId: ID!): Dive!
  removeGearFromDive(diveId: ID!, gearId: ID!): Dive!
  addBuddyToDive(diveId: ID!, buddyId: ID!): Dive!
  removeBuddyFromDive(diveId: ID!, buddyId: ID!): Dive!
  deleteDive(id: ID!): Dive!
  # Club
  createClub(data: CreateClubInput!): Club!
  updateClub(id: ID!, data: UpdateClubInput): Club!
  addClubManager(clubId: ID!, userId: ID!): Club!
  removeClubManager(clubId: ID!, managerId: ID!): Club!
  joinClub(id: ID!): Club!
  leaveClub(id: ID!): Club!
  removeClubMember(clubId: ID!, memberId: ID!): Club!
  deleteClub(id: ID!): Club!
  # Gear
  createGear(data: GearInput!): Gear!
  updateGear(id: ID!, data: GearInput!): Gear!
  deleteGear(id: ID!): Gear!
  # Group
  createGroup(data: CreateGroupInput!): Group!
  renameGroup(id: ID!, name: String!): Group!
  sendMessage(id: ID!, text: String!): Group!
  addGroupParticipant(groupId: ID!, memberId: ID!): Group!
  leaveGroup(id: ID!): Group!
}

type Subscription {
  newMessage(groupId: ID!): NewMessagePayload!
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String
  dives: [Dive]
  clubs: UserClub
  gear: [Gear]
  friends: [User]
  friendRequests: FriendRequests
}

type AuthPayload {
  user: User!
  token: String!
}

type FriendRequests {
  inbox: [User]
  sent: [User]
}

type UserClub {
  manager: [Club]
  member: [Club]
}

type Dive {
  id: ID!
  timeIn: String
  timeOut: String
  bottomTime: Float
  safetyStopTime: Float
  diveTime: Float
  maxDepth: Float
  location: String
  description: String
  club: Club
  user: User!
  buddies: [User]
  gear: [Gear]
  public: Boolean
}

type Club {
  id: ID!
  name: String!
  location: String!
  managers: [User!]!
  members: [User]
  website: String
}

type Gear {
  id: ID!
  name: String
  brand: String
  model: String
  type: String
}

type Group {
  id: ID!
  name: String!
  participants: [User!]!
  messages: [Message!]!
}

type Message {
  id: ID!
  text: String!
  sender: User!
}

type NewMessagePayload {
  message: Message!
  group: Group!
}

input UserWhereInput {
  name: String
  username: String
}

input CreateUserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  username: String
  email: String
  password: String
}

input CreateDiveInput {
  timeIn: String
  timeOut: String
  bottomTime: Float
  safetyStopTime: Float
  maxDepth: Float
  location: String
  description: String
  club: ID
  buddies: [ID]
  gear: [ID]
  public: Boolean
}

input UpdateDiveInput {
  timeIn: String
  timeOut: String
  bottomTime: Float
  safetyStopTime: Float
  maxDepth: Float
  location: String
  description: String
  club: ID
  public: Boolean
}

input DiveWhereInput {
  timeIn: String
  timeOut: String
  bottomTime: Float
  safetyStopTime: Float
  diveTime: Float
  maxDepth: Float
  location: String
  description: String
  club: ID
}

input ClubWhereInput {
  name: String
  location: String
}

input CreateClubInput {
  name: String!
  location: String!
  website: String
}

input UpdateClubInput {
  name: String
  location: String
  website: String
}

input GearInput {
  name: String
  brand: String
  model: String
  type: String
}

input CreateGroupInput {
  name: String!
  participants: [ID!]!
  text: String!
}
