type Query {
    users(
        where: UserWhereInput
        sortBy: UserSortEnum
        sortOrder: SortOrderEnum
        limit: Int
        skip: Int
    ): [User!]!
    dives(
        userId: ID!
        where: DiveWhereInput
        sortBy: DiveSortEnum
        sortOrder: SortOrderEnum
        limit: Int
        skip: Int
    ): [Dive!]!
    myDives(
        where: MyDiveWhereInput
        sortBy: DiveSortEnum
        sortOrder: SortOrderEnum
        limit: Int
        skip: Int
    ): [Dive!]!
    clubs(
        where: ClubWhereInput
        sortBy: ClubSortEnum
        sortOrder: SortOrderEnum
        limit: Int
        skip: Int
    ): [Club!]!
    gear(
        where: GearWhereInput
        sortBy: GearSortEnum
        sortOrder: SortOrderEnum
        limit: Int
        skip: Int
    ): [Gear!]!
    myGroups(
        where: GroupWhereInput
        sortBy: GroupSortEnum
        sortOrder: SortOrderEnum
        limit: Int
        skip: Int
    ): [Group!]!
    me: User!
}

type Mutation {
    # User
    createUser(data: CreateUserInput!): AuthPayload!
    login(username: String!, password: String!): AuthPayload!
    updateUser(data: UpdateUserInput!): User!
    sendOrAcceptFriendRequest(id: ID!): User!
    unfriend(id: ID!): User!
    deleteUser: User!
    # Dive
    createDive(data: CreateDiveInput!): Dive!
    updateDive(id: ID!, data: UpdateDiveInput!): Dive!
    addGearToDive(id: ID!, gearId: ID!): Dive!
    removeGearFromDive(id: ID!, gearId: ID!): Dive!
    addBuddyToDive(id: ID!, buddyId: ID!): Dive!
    removeBuddyFromDive(id: ID!, buddyId: ID!): Dive!
    deleteDive(id: ID!): Dive!
    # Club
    createClub(data: CreateClubInput!): Club!
    updateClub(id: ID!, data: UpdateClubInput): Club!
    addClubManager(id: ID!, userId: ID!): Club!
    removeClubManager(id: ID!, userId: ID!): Club!
    joinClub(id: ID!): Club!
    leaveClub(id: ID!): Club!
    removeClubMember(id: ID!, userId: ID!): Club!
    deleteClub(id: ID!): Club!
    # Gear
    createGear(data: GearInput!): Gear!
    updateGear(id: ID!, data: GearInput!): Gear!
    deleteGear(id: ID!): Gear!
    # Group
    createGroup(data: CreateGroupInput!): Group!
    renameGroup(id: ID!, name: String!): Group!
    sendMessage(id: ID!, text: String!): Group!
    addGroupParticipant(id: ID!, userId: ID!): Group!
    leaveGroup(id: ID!): Group!
}

type Subscription {
    newMessage(groupId: ID!): NewMessagePayload!
}

type User {
    id: ID!
    name: String!
    username: String!
    email: String
    dives: [Dive]
    clubs: UserClub
    gear: [Gear]
    friends: [User]
    friendRequests: FriendRequests
    groups: [Group]
}

type AuthPayload {
    user: User!
    token: String!
}

type FriendRequests {
    inbox: [User]
    sent: [User]
}

type UserClub {
    manager: [Club]
    member: [Club]
}

type Dive {
    id: ID!
    timeIn: String
    timeOut: String
    bottomTime: Float
    safetyStopTime: Float
    diveTime: Float
    maxDepth: Float
    location: String
    description: String
    club: Club
    user: User!
    buddies: [User]
    gear: [Gear]
    public: Boolean
}

type Club {
    id: ID!
    name: String!
    location: String!
    managers: [User!]!
    members: [User]
    website: String
}

type Gear {
    id: ID!
    name: String
    brand: String
    model: String
    type: String
}

type Group {
    id: ID!
    name: String!
    participants: [User!]!
    messages: [Message!]!
}

type Message {
    id: ID!
    text: String!
    sender: User!
}

type NewMessagePayload {
    message: Message!
    group: Group!
}

input UserWhereInput {
    id: ID
    name: String
    username: String
}

input CreateUserInput {
    name: String!
    username: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    username: String
    email: String
    password: String
}

input CreateDiveInput {
    id: ID
    timeIn: String
    timeOut: String
    bottomTime: Float
    safetyStopTime: Float
    maxDepth: Float
    location: String
    description: String
    club: ID
    buddies: [ID]
    gear: [ID]
    public: Boolean
}

input UpdateDiveInput {
    timeIn: String
    timeOut: String
    bottomTime: Float
    safetyStopTime: Float
    maxDepth: Float
    location: String
    description: String
    club: ID
    public: Boolean
}

input DiveWhereInput {
    id: ID
    timeIn: String
    timeOut: String
    bottomTime: Float
    safetyStopTime: Float
    diveTime: Float
    maxDepth: Float
    location: String
    description: String
    club: ID
}

input MyDiveWhereInput {
    id: ID
    timeIn: String
    timeOut: String
    bottomTime: Float
    safetyStopTime: Float
    maxDepth: Float
    location: String
    description: String
    club: ID
    public: Boolean
}

input ClubWhereInput {
    id: ID
    name: String
    location: String
}

input CreateClubInput {
    name: String!
    location: String!
    website: String
}

input UpdateClubInput {
    name: String
    location: String
    website: String
}

input GearInput {
    name: String
    brand: String
    model: String
    type: String
}

input GearWhereInput {
    id: ID
    name: String
    brand: String
    model: String
    type: String
}

input GroupWhereInput {
    id: ID
    name: String
}

input CreateGroupInput {
    name: String!
    participants: [ID!]!
    text: String!
}

enum SortOrderEnum {
    ASC
    DESC
}

enum UserSortEnum {
    name
    username
}

enum DiveSortEnum {
    timeIn
    timeOut
    bottomTime
    safetyStopTime
    diveTime
    location
}

enum ClubSortEnum {
    name
    location
}

enum GearSortEnum {
    name
    brand
    model
    type
}

enum GroupSortEnum {
    name
}
